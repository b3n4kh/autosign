#!/usr/bin/env ruby
require 'gli'
require 'autosign'
require 'socket' # for determining the current hostname
include GLI::App
require 'logging'

@logger = Logging.logger['Autosign']
@logger.level = :warn

program_desc 'Easy Puppet Certificate Autosigning'

version Autosign::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Configuration file location'
arg_name 'path'
flag [:c,:config]

desc 'log file location'
arg_name 'path'
flag [:l,:logfile]

desc 'secret symmetric key'
arg_name 'secret'
flag [:s,:secret]

desc 'Enable verbose output'
switch [:v, :verbose]

desc 'Enable debug output'
switch [:d, :debug]

desc 'Quiet output - only log errors'
switch [:q, :quiet]

desc 'Generate an autosign token'
arg_name 'certname or regex the autosign token will be valid for'
command :generate do |c|
  c.desc 'Generate a reusable token; default is to generate one-time tokens'
  c.switch [:r, :reusable]

  c.desc 'certname or regex of certnames the autosign token will be valid for'
  c.arg_name 'certname'
  c.flag [:n,:certname]

  c.desc 'autosign token validity period'
  c.default_value '7200'
  c.arg_name 'seconds'
  c.flag [:t,:validfor]

  c.action do |global_options,options,args|
    config = Autosign::Config.new({'config_file' => global_options['config']})
    global_options['secret'] = config.settings['jwt_token']['secret'] if global_options['secret'].nil?
    options['validfor'] = config.settings.to_hash['jwt_token']['validity'].to_s if options['validfor'] == '7200'
    @logger.debug "validfor: " + options['validfor']
    help_now!('no secret was defined via --secret or a config file') if global_options['secret'].nil?
    help_now!('certname is required') if options['certname'].nil?

    help_now!('validfor setting must be an positive integer number of seconds') if !/\A\d+\z/.match(options['validfor'].to_s)
    token = Autosign::Token.new(options['certname'].to_s, options['reusable'], options['validfor'].to_i, Socket.gethostname.to_s, global_options['secret'])
    @logger.info "generated token for: " + options['certname'].to_s
    puts "Autosign token for: " + token.certname
    puts "Valid until: " + Time.at(token.validto).to_s
    puts ""
    puts token.sign.to_s
    puts ""
  end
end

desc 'Validate a previously issued token'
arg_name 'path'
command :validate do |c|
  c.desc 'display the contents of the token'

  c.arg_name 'certname'
  c.flag [:n,:certname]

  c.action do |global_options,options,args|
    config = Autosign::Config.new({'config_file' => global_options['config']})
    puts config.settings.to_hash['jwt_token']
    global_options['secret'] = config.settings['jwt_token']['secret'] if global_options['secret'].nil?

    help_now!('no secret was defined via --secret or a config file') if global_options['secret'].nil?
    help_now!('certname is required') if options['certname'].nil?
    help_now!('a single token must be provided as an argument') if args.size != 1
    token = Autosign::Token.validate(options['certname'].to_s, args[0], global_options['secret'])
    if token == true
      puts "token validated successfully"
      @logger.info "token validated successfully"
    else
      @logger.error "Unable to validate token"
      exit_now!("Unable to validate token", 1)
    end
  end
end


desc 'Autosign configuration'
command :config do |c|

  c.desc 'Configure a puppet server for autosigning'
  c.command :setup do |setup|
    setup.action do |global_options,options,args|
      @logger.info "setup command ran with #{global_options} #{options} #{args}"
      @logger.info "generated default config file" if Autosign::Config.generate_default
    end
  end

  c.desc 'Print autosign configuration'
  c.command :print do |print|
    print.action do |global_options,options,args|
      @logger.debug "print command ran with #{global_options} #{options} #{args}"
      config = Autosign::Config.new({'config_file' => global_options['config']})
      puts config.settings.to_s
    end
  end

end

desc 'Install an autosign token; run this prior to running puppet for the first time on an agent'
arg_name 'token'
command :use do |c|
  c.action do |global_options,options,args|
    puppet_confdir = %x[puppet config print confdir].chomp
    @logger.debug "use command ran with #{global_options} #{options} #{args}"
    puts "put the following in #{puppet_confdir}/csr_attributes.yaml prior to running puppet agent for the first time:
custom_attributes:
  challengePassword: \"#{args[0]}\""
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
#  config = Autosign::Config.new
#  @logger.level = config.settings.to_hash['general']['loglevel'].to_sym unless config.settings.to_hash['general']['loglevel'].nil?

  @logger.level = :error if global['quiet']
  @logger.level = :info if global['verbose']
  @logger.level = :debug if global['debug']

  if global['logfile'].nil?
    @logger.add_appenders Logging.appenders.stdout
  else
    @logger.add_appenders Logging.appenders.stdout, Logging.appenders.file(global['logfile'])
  end

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
