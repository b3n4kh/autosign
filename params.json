{"name":"Puppet Autosign","tagline":"Tooling to make puppet autosigning easy, secure, and extensible","body":"### Still in development\r\nThis tool is under active development. I do not recommend production use until this notice is removed.\r\n\r\n\r\n### Puppet Autosign Tool\r\nThis gem makes it easier to use Puppet's [policy-based autosigning](https://docs.puppetlabs.com/puppet/latest/reference/ssl_autosign.html#policy-based-autosigning) for client certificates.\r\n\r\n* Generate time-limited, reusable or one-time tokens\r\n* CLI tooling\r\n* Extensive logging\r\n\r\n### Background\r\n[Puppet](https://puppetlabs.com/puppet/what-is-puppet) requires that agent SSL certificates be signed by the master's certificate authority. This can be performed manually using the `puppet cert sign` command on the master or using the Puppet Enterprise web console, automatically in an [insecure way using naive autosigning](https://docs.puppetlabs.com/puppet/latest/reference/ssl_autosign.html#security-implications-of-nave-autosigning), or automatically and (potentially) more securely using [policy-based autosigning](https://docs.puppetlabs.com/puppet/latest/reference/ssl_autosign.html#policy-based-autosigning). \r\n\r\nPolicy-based autosigning calls an external executable and passes it the certificate signing request to STDIN and the agent's certificate name as the sole parameter. No default policy autosign executable is provided, so people write their own. Many are available publicly:\r\n\r\n* Chris Barker's [AWS autosign script](https://github.com/mrzarquon/mrzarquon-certsigner)\r\n* David Lutterkort's [pre-shared key script](http://watzmann.net/blog/2014/06/puppet-autosign-policy.html)\r\n* [Enovance's example](http://techs.enovance.com/7221/policy-based-autosigning-a-step-towards-more-secure-deployments-with-puppet) for requiring specific attributes (e.g. trusted facts) in a policy executable\r\n\r\nEach of these are written as one-off scripts, solving a specific need.\r\n\r\nMany existing autosign scripts are based on validating one or more static strings (e.g. passwords, API keys, etc). If an attacker can obtain that string, they can issue valid requests to the Puppet Master, potentially allowing them to impersonate secure infrastructure and escalate privileges. People frequently forget to delete the `csr_attributes.yaml` after generating a CSR, and as with any plain-text password the tendency is for the keys to be widely distributed.\r\n\r\nThis tool can generate time limited, one-time tokens that are only valid for a specific host, so that obtaining the token after provisioning is not useful to an attacker.\r\n\r\n### Functionality\r\nThis gem provides functionality in three areas. A [JWT](http://jwt.io/)-based token system for securely issuing autosign tokens, a pluggable architecture for creating new autosign validation tools, and a CLI for managing autosign tokens.\r\n\r\n\r\n\r\n\r\n### Planned Functionality\r\nThis gem intends to (but does not yet) provide:\r\n\r\n* Multiplexing, allowing one or more existing autosign policy executables to be run as validators\r\n* Simple policy rules, allowing multiple policies to be combined. At the moment, if any one validator passes, the CSR is signed. In the future, we intend to provide the ability to require that all pass, and ideally provide more complex rules.\r\n\r\n### Security Model for JWT Tokens\r\nThe goal of the JWT tokens is to place time, reusability, and commonName constraints on tokens. There are several expected use models:\r\n\r\n#### Per-host tokens for automated provisioning\r\nDuring automated provisioning, a new token can be generated for each provisioned host. They will only be usable once, and will expire after a time period (2 hours by default).\r\n\r\n### Time-limited delegation of signing ability\r\nYou can generate a wildcard token that is only valid for hours or days, then share it with another person who needs to provision systems. Use of the token will be logged, so if you generate individual tokens for different users it's possible to audit who authorized which certificates to be signed. After the time period expires, they will no longer be able to authorize more hosts, but the previously-authorized hosts continue to work.\r\n\r\n\r\n### Authors and Contributors\r\n@danieldreier is the primary author and maintainer of this gem. I would greatly appreciate additional contributions.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out our [documentation](https://help.github.com/pages) or [contact support](https://github.com/contact) and weâ€™ll help you sort it out.","google":"UA-65052442-1","note":"Don't delete this file! It's used internally to help with page regeneration."}